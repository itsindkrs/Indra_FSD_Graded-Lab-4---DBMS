
1. Create tables for supplier, customer, category, product, supplier_pricing, order, rating
SQL
CREATE TABLE supplier (
  supp_id INT NOT NULL AUTO_INCREMENT,
  supp_name VARCHAR(50) NOT NULL,
  supp_city VARCHAR(50) NOT NULL,
  supp_phone VARCHAR(50) NOT NULL,
  PRIMARY KEY (supp_id)
);

CREATE TABLE customer (
  cus_id INT NOT NULL AUTO_INCREMENT,
  cus_name VARCHAR(20) NOT NULL,
  cus_phone VARCHAR(10) NOT NULL,
  cus_city VARCHAR(30) NOT NULL,
  cus_gender CHAR NOT NULL,
  PRIMARY KEY (cus_id)
);

CREATE TABLE category (
  cat_id INT NOT NULL AUTO_INCREMENT,
  cat_name VARCHAR(20) NOT NULL,
  PRIMARY KEY (cat_id)
);

CREATE TABLE product (
  pro_id INT NOT NULL AUTO_INCREMENT,
  pro_name VARCHAR(20) NOT NULL DEFAULT "Dummy",
  pro_desc VARCHAR(60),
  cat_id INT NOT NULL,
  PRIMARY KEY (pro_id),
  FOREIGN KEY (cat_id) REFERENCES category (cat_id)
);

CREATE TABLE supplier_pricing (
  pricing_id INT NOT NULL AUTO_INCREMENT,
  pro_id INT NOT NULL,
  supp_id INT NOT NULL,
  supp_price INT DEFAULT 0,
  PRIMARY KEY (pricing_id),
  FOREIGN KEY (pro_id) REFERENCES product (pro_id),
  FOREIGN KEY (supp_id) REFERENCES supplier (supp_id)
);

CREATE TABLE order (
  ord_id INT NOT NULL AUTO_INCREMENT,
  ord_amount INT NOT NULL,
  ord_date DATE NOT NULL,
  cus_id INT NOT NULL,
  pricing_id INT NOT NULL,
  PRIMARY KEY (ord_id),
  FOREIGN KEY (cus_id) REFERENCES customer (cus_id),
  FOREIGN KEY (pricing_id) REFERENCES supplier_pricing (pricing_id)
);

CREATE TABLE rating (
  rat_id INT NOT NULL AUTO_INCREMENT,
  ord_id INT NOT NULL,
  rat_ratstars INT NOT NULL,
  PRIMARY KEY (rat_id),
  FOREIGN KEY (ord_id) REFERENCES order (ord_id)
);

2. Develop SQL based programs (Queries) to facilitate the Admin team of the E-Commerce company to retrieve the data in summarized format
SQL
-- Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000.
SELECT gender, COUNT(*) AS total_customers
FROM customer
JOIN order
ON customer.cus_id = order.cus_id
WHERE order.ord_amount >= 3000
GROUP BY gender;

-- Display all the orders along with product name ordered by a customer having Customer_Id=2
SELECT order.ord_id, order.ord_amount, product.pro_name
FROM order
JOIN product
ON order.pricing_id = product.pricing_id
WHERE customer.cus_id = 2;

-- Display the Supplier details who can supply more than one product.
SELECT supplier.supp_id, supplier.supp_name
FROM supplier
JOIN product
ON supplier.supp_id = product.supp_id
GROUP BY supplier.supp_id
HAVING COUNT(*) > 1;

-- Find the least expensive product from each category and print the table with category id, name, product name and price of the product
SELECT category.cat_id, category.cat_name, product.pro_name, product.supp_price
FROM category
JOIN product
ON category.cat_id = product.cat_id
ORDER BY product.supp_price;

-- Display the Id and Name of the Product ordered after “2021-10-05”.
SELECT product.pro_id, product.pro_name
FROM product
JOIN order
ON product.pricing_id = order.pricing_id
WHERE order.ord_date > '2021-10-05';

-- Display customer name and gender whose names start or end with character 'A'.
SELECT customer.cus_name, customer.cus_gender
FROM customer
WHERE customer.cus_name LIKE 'A%

Answer: 3
SQL
-- Insert data into Supplier table
INSERT INTO supplier (supp_id, supp_name, supp_city, supp_phone) VALUES
(1, 'Rajesh Retails', 'Delhi', '1234567890'),
(2, 'Appario Ltd.', 'Mumbai', '2589631470'),
(3, 'Knome products', 'Banglore', '9785462315'),
(4, 'Bansal Retails', 'Kochi', '8975463285'),
(5, 'Mittal Ltd.', 'Lucknow', '7898456532');

-- Insert data into Customer table
INSERT INTO customer (cus_id, cus_name, cus_phone, cus_city, cus_gender) VALUES
(1, 'AAKASH', '9999999999', 'DELHI', 'M'),
(2, 'AMAN', '9785463215', 'NOIDA', 'M'),
(3, 'NEHA', '9999999999', 'MUMBAI', 'F'),
(4, 'MEGHA', '9994562399', 'KOLKATA', 'F'),
(5, 'PULKIT', '7895999999', 'LUCKNOW', 'M');

-- Insert data into Category table
INSERT INTO category (cat_id, cat_name) VALUES
(1, 'BOOKS'),
(2, 'GAMES'),
(3, 'GROCERIES'),
(4, 'ELECTRONICS'),
(5, 'CLOTHES');

-- Insert data into Product table
INSERT INTO product (pro_id, pro_name, pro_desc, cat_id) VALUES
(1, 'GTA V', 'Windows 7 and above with i5 processor and 8GB RAM', 2),
(2, 'TSHIRT', 'SIZE-L with Black, Blue and White variations', 5),
(3, 'ROG LAPTOP', 'Windows 10 with 15inch screen, i7 processor, 1TB SSD', 4),
(4, 'OATS', 'Highly Nutritious from Nestle', 3),
(5, 'HARRY POTTER', 'Best Collection of all time by J.K Rowling', 1),
(6, 'MILK', '1L Toned MIlk', 3),
(7, 'Boat Earphones', '1.5Meter long Dolby Atmos', 4),
(8, 'Jeans', 'Stretchable Denim Jeans with various sizes and color', 5),
(9, 'Project IGI', 'compatible with windows 7 and above', 2),
(10, 'Hoodie', 'Black GUCCI for 13 yrs and above', 5),
(11, 'Rich Dad Poor Dad', 'Written by RObert Kiyosaki', 1),
(12, 'Train Your Brain', 'By Shireen Stephen', 1);

-- Insert data into Supplier_pricing table
INSERT INTO supplier_pricing (pricing_id, pro_id, supp_id, supp_price) VALUES
(1, 1, 2, 1500),
(2, 3, 5, 30000),
(3, 5, 1, 3000),
(4, 2, 3, 2500),
(5, 4, 1, 1000),
(6, 12, 2, 780),
(7, 12, 4, 789),
(8, 3, 1, 31000),
(9, 1, 5, 1450),

4) Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000.
SQL
SELECT gender, COUNT(DISTINCT cus_id) AS total_customers
FROM customer
JOIN order
ON customer.cus_id = order.cus_id
WHERE order_amount >= 3000
GROUP BY gender;
5) Display all the orders along with product name ordered by a customer having Customer_Id=2
SQL
SELECT order.ord_id, order.ord_amount, product.pro_name
FROM order
JOIN product
ON order.pricing_id = product.pricing_id
WHERE customer_id = 2;
6) Display the Supplier details who can supply more than one product.
SQL
SELECT supplier.supp_id, supplier.supp_name, COUNT(DISTINCT product.pro_id) AS total_products
FROM supplier
JOIN product
ON supplier.supp_id = product.pricing_id
GROUP BY supplier.supp_id
HAVING COUNT(DISTINCT product.pro_id) > 1;
7) Find the least expensive product from each category and print the table with category id, name, product name and price of the product
SQL
SELECT category.cat_id, category.cat_name, product.pro_name, product.supp_price
FROM category
JOIN product
ON category.cat_id = product.cat_id
ORDER BY product.supp_price;
8) Display the Id and Name of the Product ordered after “2021-10-05”.
SQL
SELECT product.pro_id, product.pro_name
FROM product
JOIN order
ON product.pricing_id = order.pricing_id
WHERE order_date > '2021-10-05';
9) Display customer name and gender whose names start or end with character 'A'.
SQL
SELECT cus_name, gender
FROM customer
WHERE cus_name LIKE 'A%' OR cus_name LIKE '%A';
10) Create a stored procedure to display supplier id, name, Rating(Average rating of all the products sold by every customer) and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”. Note that there should be one rating per supplier.
SQL
DELIMITER $$

CREATE PROCEDURE display_supplier_rating()
BEGIN

SELECT supplier.supp_id, supplier.supp_name, AVG(rating.rat_ratstars) AS rating,
CASE
WHEN rating = 5 THEN 'Excellent Service'
WHEN rating > 4 THEN 'Good Service'
WHEN rating > 2 THEN 'Average Service'
ELSE 'Poor Service'
END AS type_of_service
FROM supplier
JOIN rating
ON supplier.supp_id = rating.ord_id
GROUP BY supplier.supp_id;
END $$
DELIMITER ;

